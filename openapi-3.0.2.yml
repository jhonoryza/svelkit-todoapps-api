openapi: '3.0.2'
info:
  title: API Todo
  version: '1.0'
servers:
  - url: http://localhost:4173/api
paths:
  /login:
    post:
      tags: [Auth]
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  example: 1bY4p@example.com
                password:
                  type: string
                  example: Password1
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: email or password is invalid
                  code:
                    type: integer
                    example: 400
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: login successfully
                  code:
                    type: integer
                    example: 201
                  data:
                    type: object
                    properties:
                      schema:
                        $ref: '#/components/schemas/User'

  /register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody: 
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  example: John
                email:
                  type: string
                  example: 1bY4p@example.com
                password:
                  type: string
                  example: Password1
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user already exist
                  code:
                    type: integer
                    example: 400
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: register successfully 
                  code:
                    type: integer
                    example: 201
                  data:
                    type: object
                    properties:
                      schema:
                        $ref: '#/components/schemas/User'
  /logout:
    delete:
      tags: [Auth]
      summary: Logout
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      responses:
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  code:
                    type: integer
                    example: 401
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: logout successfully
                  code:
                    type: integer
                    example: 200
  /authenticated/myprofile:
    get:
      tags: [User]
      summary: Get user profile
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
      responses:
        '401':
          description: Unauthenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unauthenticated
                  code:
                    type: integer
                    example: 401
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: get user profile successfully
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      schema:
                        $ref: '#/components/schemas/User'

components:
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
          example: John
        email:
          type: string
          example: 1bY4p@example.com
        password:
          type: string
          example: Password1
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9

